declare parameter low_orbit.
declare parameter high_orbit.

set radius to 600000.
set space to 70000.
set turnpoint to 10000.
set u to 3530.461.

set countdown to 10.
until countdown = 0 {
    print "[COUNTDOWN] " + countdown.
    wait 1.
    set countdown to countdown-1.
    if countdown = 2 {
        lock steering to up + r(0,0,180).
        lock throttle to 1.
    }.
    if countdown = 1 {
        print "[BURN] Ascent burn.".
        stage.
    }.
}.

stage.
wait until alt:radar > 100.
print "[STATUS] Liftoff!".

when stage:liquidfuel = 0 then {
    print "[STAGE] Separating stage 1.".
    lock throttle to 0.
    stage.
    wait 1.
    print "[STAGE] Igniting stage 2.".
    lock throttle to 1.
    stage.
}.

when altitude > turnpoint then {
    print "[STATUS] Beginning gravity turn.".
    lock steering to up + R(0,0,180) + R(0,-45,0).
}.

when altitude > space then {
    print "[STAGE] Decoupling payload fairing.".
    stage.
    wait 2.
    print "[STAGE] Extending antennas.".
    toggle ag2.
}.

run throttletv(10000).

lock throttle to 1.
wait until apoapsis > (low_orbit * 1.01).
print "[STATUS] Gravity turn complete.".
lock throttle to 0.

print "[STATUS] Coasting to circularisation burn.".
lock steering to prograde.
wait until eta:apoapsis < 10.

lock sma to ((apoapsis + periapsis + radius)*0.5)/1000.
lock period to 6.283185307 * sqrt(sma*sma*sma/u).
lock eccentricity to 1.0 - 2.0 / ((apoapsis+radius)/(periapsis+radius) + 1).

print "[BURN] Achieving stable orbit.".
lock apo_deviation to abs(apoapsis - low_orbit)/low_orbit.
lock throttle to 1.
wait until periapsis > low_orbit or (periapsis > space and apo_deviation > 0.10).
lock throttle to 0.
print "[STATUS] Coasting to transfer burn.".

run transfer(high_orbit).

print "[STATUS] High orbit @ " + apoapsis + "x" + periapsis + "; e=" + eccentricity + ", p=" + period.
lock throttle to 0.
print "[BURN] Engines cutoff.".
unlock throttle.
unlock steering.
